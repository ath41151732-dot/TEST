// auth.js ‚Äî PHHS Ï†ÑÏö© Google Î°úÍ∑∏Ïù∏ (@phhs.kr ÎèÑÎ©îÏù∏ Ï†úÌïú)
// Ï†ïÏ†Å ÏÇ¨Ïù¥Ìä∏(ÍπÉÌóàÎ∏å Pages/Netlify Îì±)ÏóêÏÑú Î∞îÎ°ú ÎèôÏûëÌïòÎèÑÎ°ù Firebase v10 CDN Î™®Îìà ÏÇ¨Ïö©

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import {
  getAuth, GoogleAuthProvider, setPersistence, browserLocalPersistence,
  signInWithPopup, onAuthStateChanged, signOut
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

import { initializeFirestore, doc, getDoc, setDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
console.log("[auth] loaded");

// üîß ÎÑ§Í∞Ä Ï§Ä Firebase ÏÑ§Ï†ï (ÏΩòÏÜîÏóêÏÑú Î≥µÏÇ¨Ìïú Í∞í)
const firebaseConfig = {
  apiKey: "AIzaSyCMBAyFozLAyVhsnm7Yl-SBJXVGAkLiysY",
  authDomain: "calender-6fe09.firebaseapp.com",
  projectId: "calender-6fe09",
  storageBucket: "calender-6fe09.firebasestorage.app",
  messagingSenderId: "822464492939",
  appId: "1:822464492939:web:d0b65cf1cd2d73b706ab8e",
  measurementId: "G-N2WYX8GBFT"
};

// Firebase Ï¥àÍ∏∞Ìôî
const app  = initializeApp(firebaseConfig);
const auth = getAuth(app);


const db = initializeFirestore(app, { experimentalAutoDetectLongPolling: true, useFetchStreams: false });
// Í∞ôÏùÄ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ïú†ÏßÄ
setPersistence(auth, browserLocalPersistence).catch(console.warn);

// ÌóàÏö©Ìï† Íµ¨Í∏Ä Ïù¥Î©îÏùº ÎèÑÎ©îÏù∏
const ALLOWED_DOMAIN = "phhs.kr";

// Î°úÍ∑∏Ïù∏ UIÎ•º ÍΩÇÏùÑ ÏûêÎ¶¨ ÌôïÎ≥¥
function ensureBox(){
  // 1) Î™ÖÏãúÏ†Å ÏûêÎ¶¨
  let box = document.getElementById("authBox");
  if (box) return box;

  // 2) Í∏∞Ï°¥ Ìà¥Î∞î Ïò§Î•∏Ï™Ω
  const bar = document.querySelector(".toolbar");
  if (bar){
    box = document.createElement("div");
    box.id = "authBox";
    box.style.marginLeft = "auto";
    box.style.display = "flex";
    box.style.alignItems = "center";
    box.style.gap = "8px";
    bar.appendChild(box);
    return box;
  }

  // 3) ÏûÑÏãú Ïö∞ÏÉÅÎã® Í≥†Ï†ï
  box = document.createElement("div");
  box.id = "authBox";
  box.style.cssText = "position:fixed;top:10px;right:10px;z-index:9999;display:flex;gap:8px;align-items:center";
  document.body.appendChild(box);
  return box;
}

// ÎπÑÎ°úÍ∑∏Ïù∏ UI
function renderSignedOut(){
  const box = ensureBox(); if (!box) return;
  box.innerHTML = "";
  const btn = document.createElement("button");
  btn.textContent = "Íµ¨Í∏ÄÎ°ú Î°úÍ∑∏Ïù∏";
  btn.addEventListener("click", async () => {
    const provider = new GoogleAuthProvider();
    // 'hd'Îäî ÏÑ†ÌÉùÌôîÎ©¥ ÌûåÌä∏(ÏôÑÏ†Ñ Í∞ïÏ†úÎäî ÏïÑÎãàÎùºÏÑú ÏïÑÎûòÏóêÏÑú Ïû¨Í≤ÄÏÇ¨)
    provider.setCustomParameters({ hd: ALLOWED_DOMAIN, prompt: "select_account" });
    try{
      const res = await signInWithPopup(auth, provider);
      const email = (res.user?.email || "").toLowerCase();
      if (!email.endsWith("@"+ALLOWED_DOMAIN)) {
        await signOut(auth);
        alert(`${ALLOWED_DOMAIN} Í≥ÑÏ†ïÎßå Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.`);
      }
    }catch(e){
      if (e?.code !== "auth/popup-closed-by-user"){
        alert("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: " + (e?.message || e));
      }
    }
  });
  box.appendChild(btn);
}

// Î°úÍ∑∏Ïù∏ UI
function renderSignedIn(user){
  const box = ensureBox(); if (!box) return;
  box.innerHTML = "";
  const who = document.createElement("span");
  who.style.fontSize = "12px";
  who.style.opacity = ".8";
  who.textContent = `${user.displayName || user.email} Î°úÍ∑∏Ïù∏Îê®`;
  const out = document.createElement("button");
  out.textContent = "Î°úÍ∑∏ÏïÑÏõÉ";
  out.addEventListener("click", () => signOut(auth));
  box.append(who, out);
}

// Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Î∞òÏòÅ + ÎèÑÎ©îÏù∏ Í∞ïÏ†ú

// === Firestore ÎèôÍ∏∞Ìôî (Î°úÍ∑∏Ïù∏ ÌõÑ ÏãúÏûë) ===
function startEventsSync(uid){
  try {
    if (!uid) return;
    const ref = doc(db, "users", uid); // users/{uid}

    // ÏµúÏ¥à ÎèôÍ∏∞Ìôî
    (async () => {
      try{
        const snap = await getDoc(ref);
        const local = (typeof window.getUserEvents === 'function')
          ? (window.getUserEvents() || [])
          : (window.EVENTS_USER || []);
        if (!snap.exists()){
          await setDoc(ref, { events: local, updatedAt: Date.now() });
        } else {
          const remote = Array.isArray(snap.data()?.events) ? snap.data().events : [];
          if (remote.length){
            window.applyRemoteEvents?.(remote);
          } else if (local.length){
            await setDoc(ref, { events: local, updatedAt: Date.now() }, { merge: true });
          }
        }
      }catch(e){ console.warn('[sync] initial', e); }
    })();

    // Ïã§ÏãúÍ∞Ñ ÏàòÏã†
    if (window._unsubEvents) try{ window._unsubEvents(); }catch{}
    window._unsubEvents = onSnapshot(ref, (snap) => {
      const arr = Array.isArray(snap.data()?.events) ? snap.data().events : [];
      window.applyRemoteEvents?.(arr);
    });

    // Î°úÏª¨ Ï†ÄÏû• ÎûòÌïë ‚Üí ÌÅ¥ÎùºÏö∞Îìú ÏóÖÎç∞Ïù¥Ìä∏
    const origSave = window.saveUserEvents;
    window.saveUserEvents = function(){
      try{ origSave && origSave(); }catch{}
      try{
        const arr = (typeof window.getUserEvents === 'function')
          ? (window.getUserEvents() || [])
          : (window.EVENTS_USER || []);
        setDoc(ref, { events: Array.isArray(arr) ? arr : [], updatedAt: Date.now() }, { merge: true });
      }catch(e){ console.warn('[sync] push', e); }
    };
  } catch (e) {
    console.warn('[sync] startEventsSync error', e);
  }
}
function stopEventsSync(){ try{ window._unsubEvents && window._unsubEvents(); }catch{} }
window.startEventsSync = startEventsSync;
window.stopEventsSync  = stopEventsSync;
// === END Firestore ÎèôÍ∏∞Ìôî ===

onAuthStateChanged(auth, (user) => {
  const ok = !!user && (user.email || "").toLowerCase().endsWith("@"+ALLOWED_DOMAIN);
  if (ok) renderSignedIn(user);
  else    renderSignedOut();
});

// ÎîîÎ≤ÑÍπÖÏö©
window.phhsAuth = { auth, signOut, onAuthStateChanged };


// === Lightweight Auth UI mount (guarantees login button) ===
function mountAuthUI(){
  try {
    const box = document.getElementById('authBox');
    if (!box) return;

    if (!box.querySelector('#authUI')) {
      box.innerHTML = [
        '<div id="authUI" style="display:flex;gap:.5rem;align-items:center">',
        '  <button id="loginBtn" type="button">Google Î°úÍ∑∏Ïù∏</button>',
        '  <span id="userName" style="display:none"></span>',
        '  <button id="logoutBtn" type="button" style="display:none">Î°úÍ∑∏ÏïÑÏõÉ</button>',
        '</div>'
      ].join('');
    }

    const loginBtn  = box.querySelector('#loginBtn');
    const logoutBtn = box.querySelector('#logoutBtn');
    const userName  = box.querySelector('#userName');

    const provider = new GoogleAuthProvider();
    try {
      if (typeof ALLOWED_DOMAIN === 'string' && ALLOWED_DOMAIN) {
        provider.setCustomParameters({ hd: ALLOWED_DOMAIN, prompt: 'select_account' });
      }
    } catch (e) {}

    if (loginBtn) loginBtn.onclick  = () => signInWithPopup(auth, provider).catch(console.warn);
    if (logoutBtn) logoutBtn.onclick = () => signOut(auth).catch(console.warn);

    function showSignedIn(u){
      if (loginBtn)  loginBtn.style.display = 'none';
      if (userName) { userName.style.display = ''; userName.textContent = (u.displayName || u.email || 'Î°úÍ∑∏Ïù∏Îê®'); }
      if (logoutBtn) logoutBtn.style.display = '';
    }
    function showSignedOut(){
      if (loginBtn)  loginBtn.style.display = '';
      if (userName)  userName.style.display = 'none';
      if (logoutBtn) logoutBtn.style.display = 'none';
    }

    // UI + ÎèôÍ∏∞Ìôî
    onAuthStateChanged(auth, (user) => {
      const email = (user && user.email || '').toLowerCase();
      const allowed = (typeof ALLOWED_DOMAIN === 'string' && ALLOWED_DOMAIN)
        ? email.endsWith('@' + ALLOWED_DOMAIN)
        : true;
      if (user && allowed){
        showSignedIn(user);
        window.startEventsSync?.(user.uid);
      } else {
        showSignedOut();
        window.stopEventsSync?.();
      }
    });
  } catch (e) {
    console.warn('[auth-ui] mount error', e);
  }
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', mountAuthUI, { once: true });
} else {
  mountAuthUI();
}
// === END Lightweight Auth UI ===

